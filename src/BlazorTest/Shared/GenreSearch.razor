@inject IJSRuntime JS

<div class="row">
	<div class="col-md-4">
		<h5 class="modal-title">@(ItemTypePlural ?? ItemType + "s")</h5>
		<select class="w-100" id="@Id" @onchange="@OnItemSelected">
			<option class="d-none" selected disabled hidden value="">
				Select @ItemType
			</option>
			@foreach (var item in AvailableItems)
			{
				<option value="@item">@item</option>
			}
		</select>
	</div>

	<ul class="row col-md-8 my-1">
		@foreach (var item in Items)
		{
			<button class="btn btn-primary btn-xs rounded-pill col-md-6"
				@onclick="@(() => OnItemRemoved(item))">
				@item
				<span class="float-end">
					🗙
				</span>
			</button>
		}
	</ul>
</div>

@code {
	[Parameter]
	public IEnumerable<string> AvailableItems { get; set; } = Enumerable.Empty<string>();
	public string Id => ItemType?.ToLower() + "Select";
	[Parameter]
	public EventCallback<string> ItemAdded { get; set; }
	[Parameter]
	public EventCallback<string> ItemRemoved { get; set; }
	[Parameter]
	public IEnumerable<string> Items { get; set; } = Enumerable.Empty<string>();
	[Parameter]
	public string? ItemType { get; set; }
	[Parameter]
	public string? ItemTypePlural { get; set; }

	private async Task OnItemSelected(ChangeEventArgs e)
	{
		await ItemAdded.InvokeAsync(e.Value?.ToString()!).ConfigureAwait(false);
		await JS.InvokeVoidAsync(JSMethods.ResetSelectedIndex, Id).ConfigureAwait(false);
	}

	private Task OnItemRemoved(string item)
		=> ItemRemoved.InvokeAsync(item);
}
