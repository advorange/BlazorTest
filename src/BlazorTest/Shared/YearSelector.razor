<MudDatePicker OpenTo="OpenTo.Year" Editable="true" FixMonth="1" FixDay="1"
	Label="@(ItemType + " Year")" DateFormat="yyyy"
	MinDate="@min" MaxDate="@max" Date="@value"
	DateChanged="@OnDateChanged"
/>

@code {
	private static DateTime DefaultMax = DateTime.UtcNow;
	private static DateTime DefaultMin = new(year: 1900, month: 1, day: 1);

	private DateTime max = DefaultMax;
	private DateTime min = DefaultMin;
	private DateTime? value;

	[Parameter]
	public string? ItemType { get; set; }
	[Parameter]
	public int? MaximumYear
	{
		get => max.Year;
		set => max = ToDateTime(value) ?? DefaultMax;
	}
	[Parameter]
	public int? MinimumYear
	{
		get => min.Year;
		set => min = ToDateTime(value) ?? DefaultMin;
	}
	[Parameter]
	public int? Year
	{
		get => value?.Year;
		set => this.value = ToDateTime(value);
	}
	[Parameter]
	public EventCallback<int?> YearChanged { get; set; }

	private Task OnDateChanged(DateTime? date)
	{
		// Don't bind directly to @bind-Value so we can prevent illegal values from being set
		if (date?.Year is int year && (year > MaximumYear || year < MinimumYear))
		{
			return Task.CompletedTask;
		}

		this.value = date;
		return YearChanged.InvokeAsync(date?.Year);
	}

	private static DateTime? ToDateTime(int? num)
		=> num is int year ? new(year: year, month: 1, day: 1) : null;
}
